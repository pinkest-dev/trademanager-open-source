import React, { useState, useEffect, MouseEvent, useRef } from 'react';
import './Table.css'; // Import your CSS file
import Field from '../../../electron/interfaces/TableFields/Field';
import AvalibleFieldTypes from '../../../electron/interfaces/TableFields/AvalibleFieldTypes';
import uuid from 'react-uuid';
import ReactTooltip from 'react-tooltip';

export interface Cell { type: AvalibleFieldTypes, jsx: JSX.Element };
export interface Line { cells: Cell[], deleted: boolean };
export interface TableDataInterface {
  fields: Field[],
  lines: Line[],
  isSelected?: boolean,
  onSelect?: (isChecked: boolean) => void,
  onSort?: (fieldType: AvalibleFieldTypes, direction: 'UP' | 'DOWN') => void,
  onChangeFieldWidth?: (fieldType: AvalibleFieldTypes, newWidth: number) => void
};

const Table: React.FC<TableDataInterface> = ({ fields, lines, onChangeFieldWidth }) => {
  const ref = useRef(null);
  const [columnWidths, setColumnWidths] = useState<number[]>([]);
  const [altText, setAltText] = useState(<></>);
  const textBoxId = uuid();

  useEffect(() => {
    if (fields.length == 0) return;
    const fieldsWidth = fields.map(f => f.width).map(f => !f ? 100 : f);
    setColumnWidths(fieldsWidth); // Set initial column widths
  }, [fields]);

  const handleResize = (index: number, event: MouseEvent) => {
    event.stopPropagation();
    const startX = event.clientX;
    const startWidth = columnWidths[index];

    const doResize = (event: any) => {
      const width = startWidth - (startX - event.clientX);
      setColumnWidths(prev => {
        const copy = [...prev];
        copy[index] = width > 50 ? width : 50; // minimum column width is 50px
        return copy;
      });
    };

    const stopResize = (event: any) => {
      window.removeEventListener('mousemove', doResize);
      window.removeEventListener('mouseup', stopResize);
      if (onChangeFieldWidth) {
        const newWidth = startWidth - (startX - event.clientX);
        onChangeFieldWidth(fields[index].type, newWidth > 50 ? newWidth : 50);
      }
    };

    window.addEventListener('mousemove', doResize);
    window.addEventListener('mouseup', stopResize);
  };

  return (
    <div className="table" >
      <ReactTooltip place="top" type="dark" effect="float" id={textBoxId}>
        ASDF
      </ReactTooltip>
      <div className="table__wrapper" ref={ref} onWheel={(e) => {
        if (ref.current)
          (ref.current as HTMLDivElement).scrollLeft += e.deltaY;
      }}>
        <div className="table__row table__row--first">
          {fields.map((field, index) =>
            <div key={index} className="table__cell" style={{ width: columnWidths[index] }} data-tip="React-tooltip"
              data-for={textBoxId}>
              {columnWidths[index] <= (field.title.length * 10) ? "" : field.title}
              <div className="table__resize-handle" onMouseDown={(event) => handleResize(index, event)} />
            </div>
          )}
        </div>
        {lines.map((line, rowIndex) => (
          <div key={rowIndex} className="table__row">
            {line.cells.map((cell, index) => <div key={index} className="table__cell" style={{ width: columnWidths[index] }}>
              {cell.jsx}
            </div>)}
          </div>
        ))}
      </div>
    </div>
  );
};

const getAltText = (field: Field) => {
  switch (field.type) {
    case AvalibleFieldTypes.linkedProxies:
      return <div className='alt-text-container'>–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∏–º Steam –∞–∫–∫–∞—É–Ω—Ç–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏</div>
    case AvalibleFieldTypes.steamAccountName:
      return <div className='alt-text-container'>–≠—Ç–æ –ª–æ–≥–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤–≤–æ–¥–∏—Ç–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ Steam</div>
    case AvalibleFieldTypes.steamPassword:
      return <div className='alt-text-container'>–ü–∞—Ä–æ–ª—å –æ—Ç Steam –∞–∫–∫–∞—É–Ω—Ç–∞ (—á—Ç–æ —Ç—É—Ç –µ—â–µ –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å???üôÑ)</div>
    case AvalibleFieldTypes.steamAccountLevel:
      return <div className='alt-text-container'>–í–∞—à —É—Ä–æ–≤–µ–Ω—å Steam</div>
    case AvalibleFieldTypes.tradeState:
      return <div className='alt-text-container'>–ú–æ–∂–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–µ–π–¥—ã</div>
    case AvalibleFieldTypes.tpState:
      return <div className='alt-text-container'>–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞</div>
    case AvalibleFieldTypes.ktState:
      return <div className='alt-text-container'>–°—Ç–∞—Ç—É—Å –∫—Ä–∞—Å–Ω–æ–π —Ç–∞–±–ª–∏—á–∫–∏ –≤ Steam. –£–ø–æ—Å–∏ –≥–æ—Å–ø–æ–¥—å —É–≤–∏–¥–µ—Ç—å –∑–¥–µ—Å—å —á—Ç–æ-—Ç–æ –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç —Å–ª–æ–≤–∞ –û–ö üòà</div>
    case AvalibleFieldTypes.steamAccountBalance:
      return <div className='alt-text-container'>–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –±–∞–ª–∞–Ω—Å—ã Steamüòô. –ß—Ç–æ –µ—â–µ —Å–∫–∞–∑–∞—Ç—å?</div>
    case AvalibleFieldTypes.csgoTmBalance:
      return <div className='alt-text-container'>–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –±–∞–ª–∞–Ω—Å—ã –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –Ω–∞ —Å–∞–π—Ç–µ https://market.csgo.com. –£—Å–ª–æ–≤–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å api –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö</div>
    case AvalibleFieldTypes.number:
      return <div className='alt-text-container'>–≠—Ç–æ –Ω–æ–º–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ. –ï–≥–æ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å. –ü–æ —Å—É—Ç–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã</div>
    case AvalibleFieldTypes.steamAccountNickname:
      return <div className='alt-text-container'>–¢—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∏–∫–Ω–µ–π–º—ã –∏–∑ Steam (–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è)</div>;
    case AvalibleFieldTypes.tmApiKey:
      return <div className='alt-text-container'>Api –∫–ª—é—á –æ—Ç —Å–∞–π—Ç–∞ https://market.csgo.com –ù—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ—Ç—Ç—É–¥–∞. –ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –º–∞—Ä–∫–µ—Ç–æ–º, —Ç–æ –≤–ø–æ–ª–Ω–µ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º</div>;

    case AvalibleFieldTypes.proxyHost:
      return <div className='alt-text-container'>–¢—É—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è —Ö–æ—Å—Ç—ã –ø—Ä–æ–∫—Å–∏. –≠—Ç–æ —á–∞—Å—Ç—å ip –∞–¥—Ä–µ—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 123.123.123.123</div>;
    case AvalibleFieldTypes.proxyPort:
      return <div className='alt-text-container'>–¢—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ—Ä—Ç—ã –ø—Ä–æ–∫—Å–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: 30013</div>;
    case AvalibleFieldTypes.proxyUsername:
      return <div className='alt-text-container'>–¢—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ª–æ–≥–∏–Ω—ã –æ—Ç –≤–∞—à–∏—Ö –ø—Ä–æ–∫—Å–∏</div>;
    case AvalibleFieldTypes.proxyPassword:
      return <div className='alt-text-container'>–¢—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–∞—Ä–æ–ª–∏ –æ—Ç –≤–∞—à–∏—Ö –ø—Ä–æ–∫—Å–∏</div>;
    case AvalibleFieldTypes.linkedSteamAccounts:
      return <div className='alt-text-container'>–¢—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–æ–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ–∫—Å–∏. (–ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏)</div>;
    case AvalibleFieldTypes.linkedProfiles:
      return <div className='alt-text-container'>–¢—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–æ–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∫ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ–∫—Å–∏ (–ö–∞–∂–¥—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏)</div>;
  }
  return "";
}

export default Table;